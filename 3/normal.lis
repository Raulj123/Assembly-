     1                                  ;**
     2                                  ;Program name:  Non-deterministic Random Numbers.This program will generate up to 100 random number using the non-deterministic 
     3                                  ;random number generator found inside of modern X86 microprocessors.Later the random numbers are restricted to the interval 1.0 <= Number < 2.0 
     4                                  ;or even intervals such as 1.0 <= number < M, where is a predetermined fixed upper limit..
     5                                  ; Copyright (C) 2021 Raul Jarquin Valdez.                                                                           *
     6                                  ;                                                                                                                           *
     7                                  ;This file is part of the software program Non-deterministic Random Numbers.                                                                   *
     8                                  ;Non-deterministic Random Numbers is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License   *
     9                                  ;version 3 as published by the Free Software Foundation.                                                                    *
    10                                  ;Non-deterministic Random Numbers is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied          *
    11                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    12                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    13                                  ;**
    14                                  
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;
    18                                  ;Author information
    19                                  ;  Author name: Raul Jarquin Valdez
    20                                  ;  Author email: jarquinr121@csu.fullerton.edu
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: Non-deterministic Random Numbers
    24                                  ;  Programming languages: Two modules in C and three module in X86
    25                                  ;  Date program began:  02/25/23
    26                                  ;  Date of last update: 03/05/23
    27                                  ;
    28                                  ;  Files in this program: executive.asm, fill_random_array.asm, show_array.asm, main.c, compar.c normal.asm
    29                                  ;  Status: Finished.
    30                                  ;
    31                                  ;This file
    32                                  ;   File name: normal.asm
    33                                  ;   Language: X86 with Intel syntax.
    34                                  ;   Max page width: 132 columns
    35                                  ;   Assemble: nasm -f elf64 -l normal.lis -o normal.o normal.asm 
    36                                  ;   Link: gcc -m64 -no-pie -o main.out executive.o main.o fill_random_array.o show_array.o compar.o normal.o -std=c17
    37                                  ;   Purpose:  normalizing numbers in array 
    38                                  ;===== Begin code area ================================================================================================
    39                                  
    40                                  
    41                                  global normal
    42                                  extern printf
    43                                  extern scanf
    44                                  
    45                                  segment .data
    46                                  
    47                                  
    48                                  segment .bss
    49                                  
    50                                  
    51                                  segment .text
    52                                  normal:
    53 00000000 6A00                    push qword 0 
    54                                  
    55 00000002 55                      push rbp                                             ;Backing up registers
    56 00000003 4889E5                  mov  rbp,rsp
    57 00000006 57                      push rdi                                             ;Backup rdi
    58 00000007 56                      push rsi                                             ;Backup rsi
    59 00000008 52                      push rdx                                             ;Backup rdx
    60 00000009 51                      push rcx                                             ;Backup rcx
    61 0000000A 4150                    push r8                                              ;Backup r8
    62 0000000C 4151                    push r9                                              ;Backup r9
    63 0000000E 4152                    push r10                                             ;Backup r10
    64 00000010 4153                    push r11                                             ;Backup r11
    65 00000012 4154                    push r12                                             ;Backup r12
    66 00000014 4155                    push r13                                             ;Backup r13
    67 00000016 4156                    push r14                                             ;Backup r14
    68 00000018 4157                    push r15                                             ;Backup r15
    69 0000001A 53                      push rbx                                             ;Backup rbx
    70 0000001B 9C                      pushf                                                ;Backup rflags
    71                                  
    72                                  
    73 0000001C 4989FF                  mov r15, rdi       ;First parameter array
    74 0000001F 4989F6                  mov r14, rsi       ;Second parameter array size 
    75 00000022 41BD00000000            mov r13, 0         ;For loop counter 
    76                                  
    77                                  loop_normal:
    78 00000028 4D39F5                      cmp r13,r14
    79 0000002B 7422                        je endloop_normal
    80                                  
    81 0000002D 4B8B1CEF                    mov rbx,[r15+8*r13]
    82 00000031 48C1E30C                    shl rbx, 12
    83 00000035 48C1EB0C                    shr rbx, 12
    84 00000039 41B8FF030000                mov r8, 1023
    85 0000003F 49C1E034                    shl r8, 52
    86 00000043 4C09C3                      or rbx, r8
    87 00000046 4B891CEF                    mov[r15 +8*r13], rbx
    88 0000004A 49FFC5                      inc r13
    89 0000004D EBD9                        jmp loop_normal
    90                                  
    91                                  endloop_normal:
    92                                  
    93 0000004F 9D                      popf                                              ;Restore rflags
    94 00000050 5B                      pop rbx                                           ;Restore rbx
    95 00000051 415F                    pop r15                                           ;Restore r15
    96 00000053 415E                    pop r14                                           ;Restore r14
    97 00000055 415D                    pop r13                                           ;Restore r13
    98 00000057 415C                    pop r12                                           ;Restore r12
    99 00000059 415B                    pop r11                                           ;Restore r11
   100 0000005B 415A                    pop r10                                           ;Restore r10
   101 0000005D 4159                    pop r9                                            ;Restore r9
   102 0000005F 4158                    pop r8                                            ;Restore r8
   103 00000061 59                      pop rcx                                           ;Restore rcx
   104 00000062 5A                      pop rdx                                           ;Restore rdx
   105 00000063 5E                      pop rsi                                           ;Restore rsi
   106 00000064 5F                      pop rdi                                           ;Restore rdi
   107 00000065 5D                      pop rbp                                           ;Restore rbp
   108                                  
   109 00000066 58                      pop rax
   110                                  
   111 00000067 C3                      ret
   112                                  
   113                                  
   114                                  
   115                                  
   116                                  
   117                                  
   118                                  
   119                                  
   120                                  
   121                                  
   122                                  
